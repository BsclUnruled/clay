script = {SOI ~ line* ~ EOI}


//tools
COMMENT = _{
    | ignore_idents ~ "::" ~ type_expr 
    | "--" ~ (!NEWLINE ~ ANY)* ~ NEWLINE
}

NEWLINE = _{
    | "\r\n"
    | "\n"
    | "\r"
}

WHITESPACE = _{
    | " "
    | "\t"
    | "\r"
    | "\n"
}

//top-level
line = {
    ( func
    | set
    | block
    | loop
    | expr) ~ 
    (guard | try | next)? ~ 
    comma?
}

set = {
    deco? ~ (ignore | idents | destruct) ~ assign ~ line
}

func = {
    deco? ~ (ignore | idents)? ~ args ~ func_assign ~ line
}

func_assign = _{"="}

block = {
    ll ~ line* ~ lr
}

loop = {
    unscope ~ expr ~ arrow ~ line
}

expr = {
    (just_ignore
    | ident
    | value 
    | braket) ~
    ( acc
    | none_acc
    | index
    | slice
    | call_braket)*
}

guard = {
    (guard_op ~ !ignore ~ expr ~ arrow ~ line)* ~
    guard_op ~ ignore ~ arrow ~ line
}

try = {
    try_op ~ line
}

next = {
    next_op ~ line
}

//零散的东西

//destruct
destruct = {
    idents ~ (comma ~ idents)* ~ (comma ~ uident) ~ comma?
}

//括号们
braket = {
    sl ~ line? ~ sr
}

call_braket = {
    sl ~ (expr ~ (comma ~ expr)*)? ~ comma? ~ sr
}

args = {
    sl ~ (ident ~ (comma ~ ident)* ~ (comma ~ uident)? ~ comma?)?  ~ sr
}

index = {ml ~ expr ~ mr}
slice = {
    ml ~ expr? ~ to ~ expr? ~ mr
}

//访问器
just_ignore = {ignore}
ignore = _{"_"}

ident = ${
    ("_" | "#" | 'a'..'z' | 'A'..'Z') ~ ("_" | "#" | 'a'..'z' | 'A'..'Z' | '0'..'9')*
}

uident = {unscope ~ ident}

ignore_ident = @{
    ("_" | "#" | 'a'..'z' | 'A'..'Z') ~ ("_" | "#" | 'a'..'z' | 'A'..'Z' | '0'..'9')*
}

point = _{"."}

acc = {
    point ~ ident
}

ignore_acc = _{
    point ~ ignore_ident
}

none_acc = {
    point ~ what
}

what = _{"?"}

idents = {
    ident ~ acc*
}

ignore_idents = _{
    ignore_ident ~ ignore_acc*
}

//字面量
value = {number | string | array}

array = {
    ml ~ ((expr | uexpr) ~ ("," ~ (expr | uexpr))* ~ ","?)?  ~ mr
}

number = ${
    ('0'..'9' | "_")+ ~ ("." ~ ('0'..'9' | "_")+)?
}

string = {
    | squote ~ s_text ~ squote
    | dquote ~ d_text ~ dquote
}

s_text = {(escape_squote | !squote ~ ANY)*}
d_text = {(escape_dquote | !dquote ~ ANY)*}

squote = _{"'"}
dquote = _{"\""}
escape_squote = {"\\'"}
escape_dquote = {"\\\""}

//try|guard
try_op = _{"!!"}
arrow = _{"=>"}
guard_op = _{"|"}
next_op = _{">>"}

//unscope
unscope = _{"..."}
uexpr = {
    unscope ~ expr
}

//assign
assign = {
    | "="
    | "+="
    | "-="
    | "*="
    | "/="
    | "%="
}

//decorator
deco = {
    deco_head ~ idents ~ call_braket?
}
deco_head = _{
    "@"
}

//op
sl = _{"("}
sr = _{")"}

ml = _{"["}
mr = _{"]"}

ll = _{"{"}
lr = _{"}"}

comma = _{","}
to = _{":"}

//type_expr
type_expr = _{
    | ignore_idents ~ (ml ~ (type_expr ~ (comma ~ type_expr)* ~ comma?)? ~ mr)?
    | sl ~ (type_expr ~ (comma ~ type_expr)* ~ comma?)? ~ sr ~ func_assign ~ type_expr
}