script = { SOI ~ (line ~ comma?)* ~ EOI }

// tools
COMMENT = _{
  | type_hint
  | "--" ~ (!NEWLINE ~ ANY)* ~ NEWLINE
}

type_hint = _{
    ignore_idents ~ ans ~ "::" ~ ans ~ 
    ((limit ~ ans ~ (comma ~ ans ~ limit ~ ans)* ~ ans ~ comma?)? ~ ans ~ arrow)? ~ ans ~ 
    type_expr
}

limit = _{
    ignore_ident ~ (ans ~ (">" | "<" | ">=" | "<=" | "==" | "!=" | "=") ~ ans ~ type_expr)?
}

ans = _{
    | WHITESPACE*
}

NEWLINE = _{
  | "\r\n"
  | "\n"
  | "\r"
}

WHITESPACE = _{
  
  | " "
  | "\t"
  | "\r"
  | "\n"
}

// top-level
line = {
    (func | set | block | loop | expr) ~ (guard | try | next)?
}

set = {
    deco? ~ (ignore | idents | destruct) ~ assign ~ line
}

func = {
    deco? ~ (ignore | idents)? ~ args ~ func_assign ~ line
}

func_assign = _{ "=" }

block = {
    ll ~ (line ~ comma?)* ~ lr
}

loop = {
    unscope ~ expr ~ arrow ~ line
}

base_expr = {
  (just_ignore | ident | op_to_func | value | braket)
   ~ (acc | none_acc | index | slice | call_braket)*
}

guard = {
    (guard_op ~ !ignore ~ expr ~ arrow ~ line)* ~ guard_op ~ ignore ~ arrow ~ line
}

try = {
    try_op ~ line
}

next = {
    next_op ~ line
}

// 零散的东西

// destruct
destruct = {
    idents ~ (uidents | idents ~ (comma ~ idents)* ~ (comma ~ uidents)?)? ~ comma? ~ comma?
}

// 括号们
braket = {
    sl ~ line ~ sr
}

call_braket = {
    sl ~ (line ~ (comma ~ line)*)? ~ comma? ~ sr
}

args = {
    sl ~ (uidents | (idents ~ default_value?) ~ (comma ~ (idents ~ default_value?))* ~ (comma ~ uidents)?)? ~ comma? ~ sr
}

default_value = {func_assign ~ line}

index = { ml ~ expr ~ mr }
slice = {
    ml ~ expr? ~ to ~ expr? ~ mr
}

// 访问器
just_ignore =  { ignore }
ignore      = _{ "_" }

ident = ${
    ("_" | "#" | 'a'..'z' | 'A'..'Z') ~ ("_" | "#" | 'a'..'z' | 'A'..'Z' | '0'..'9')*
}

uidents = { unscope ~ idents }

ignore_ident = @{
    ("_" | "#" | 'a'..'z' | 'A'..'Z') ~ ("_" | "#" | 'a'..'z' | 'A'..'Z' | '0'..'9')*
}

point = _{ "." }

acc = {
    point ~ ident
}

ignore_acc = _{
    point ~ ignore_ident
}

none_acc = {
    point ~ what
}

what = _{ "?" }

idents = {
    ident ~ acc*
}

ignore_idents = _{
    ignore_ident ~ ignore_acc*
}

// 字面量
value = { number | string | array }

array = {
    ml ~ ((expr) ~ ("," ~ (expr))* ~ ","?)? ~ mr
}

number = ${
    ('0'..'9' | "_")+ ~ ("." ~ ('0'..'9' | "_")+)?
}

string = {
  
  | raw
  | escape
  | backtick
}

raw      = { squote ~ s_text ~ squote }
escape   = { dquote ~ d_text ~ dquote }
backtick = { bquote ~ b_text ~ bquote }

b_text = { (to_eval | escape_bquote | !bquote ~ ANY)* }
s_text = { (!squote ~ ANY)* }
d_text = { (escape_dquote | !dquote ~ ANY)* }

bquote = _{ "`" }
squote = _{ "'" }
dquote = _{ "\"" }

escape_bquote = { "\\`" }
escape_dquote = { "\\\"" }

to_eval = {
    to_eval_head ~ (line ~ comma?)* ~ lr
}

to_eval_head = _{
    "${"
}

// try|guard
try_op   = _{ "!!" }
arrow    = _{ "=>" }
guard_op = _{ "|" }
next_op  = _{ ">>" }

// unscope
unscope = _{ "..." }

// assign
assign = {
  
  | "="
  | "+="
  | "-="
  | "*="
  | "/="
  | "%="
}

// decorator
deco      =  {
    deco_head ~ idents ~ call_braket?
}
deco_head = _{
    "@"
}

// op
sl = _{ "(" }
sr = _{ ")" }

ml = _{ "[" }
mr = _{ "]" }

ll = _{ "{" }
lr = _{ "}" }

comma = _{ "," }
to    = _{ ":" }

// type_expr
type_expr = _{
  | ignore_idents ~ ans ~ (ml ~ ans ~ (type_expr ~ ans ~ (comma ~ ans ~ type_expr)* ~ ans ~ comma?)? ~ ans ~ mr)?
  | sl ~ ans ~ (type_expr ~ ans ~ (comma ~ ans ~ type_expr ~ ans)* ~ ans ~ comma?)? ~ ans ~ sr ~ ans ~ func_assign ~ ans ~ type_expr
}

// operate
expr = {
    uepxr
}

pow = {
    base_expr ~ ("**" ~ base_expr)*
}

neg = {
    "-" ~ pow
}

term = {
    (neg | pow) ~ (("*" | "/" | "%") ~ (neg | pow))*
}

factor = {
    term ~ (("+" | "-") ~ term)*
}

camp = {
    factor ~ ((">=" | "==" | "<=" | "<" | ">" | "!=") ~ factor)*
}

bool_op = {
  
  | camp ~ (("&&" | "||") ~ camp)*
  | "!" ~ camp
}

dollar = {
    bool_op ~ ("$" ~ bool_op)*
}

pair = {
    dollar ~ ("->" ~ dollar)*
}

uepxr = {
  | pair
  | unscope ~ pair
}

op_to_func = {
    sl ~ ops ~ sr
}

ops = {
  | "+"
  | "-"
  | "*"
  | "/"
  | "%"
  | "=="
  | "!="
  | ">="
  | "<="
  | ">"
  | "<"
  | "&&"
  | "||"
  | "!"
  | "**"
  | "<-"
  | "->"
  | "$"
  | "//"
  | "??"
}
